"""""""""""""""""""""""""""
Checkers Board View class

By: Oscar De La Garza & Yehya Albakri

"""""""""""""""""""""""""""

import CheckersState

class CheckersView:
    """
    A class used to provide a view of the board for the player(s)
    """

    def __init__(self, board):
        """
        Creates the instance of a Board

        Args:
            board: the board being represented
        """
        self.board = board

    def picture(self):
        """
        pictures the board for you to see
        """
        pass

class BoardGraphics:
    """
    Create defined graphics of the board to then use
    demonstrate a 2D perspective of the game later on
    """
    def __init__(self):
        """
        Import image of checkers board
        that has been sized and edited = self
        """
        #Make the board a base bottom layer image
        pass

    def black_piece_graphic(self):
        """
        Import sized and edited image of
        black checkers piece = self
        """
        #Make defined black_piece graphic
        pass

    def red_piece_graphic(self):
        """
        Import sized and edited image of
        white checkers piece = self
        """
        #Make defined white_piece graphic
        pass

    def black_king_graphic(self):
        """
        Import sized and edited image of
        black king checkers piece = self
        """
        #Make defined black_king graphic
        pass

    def red_king_graphic(self):
        """
        Import sized and edited image of
        white king checkers piece = self
        """
        #Make defined white_king graphic
        pass

class InsertGraphics:
    """
    Insert Graphics defined by BoardGraphics
    to demonstrate a 2D perspective of the game
    """
    def read_board(self, board):
        """
        Use Board from CheckersState to tell current
        state of the game and layer graphics of pieces
        ontop of the board based on pixel distances on
        board graphic

        Args:
            board: the board in question from CheckersState
        Returns:
            List that contains corresponding info of pieces to
            where the pieces graphics should be layered ontop
        """
        #Read info from array into a new list, "locations" each time with a
        #graphic corresponding to a piece(0-4)
            #0 = Board/Empty space
            #1 = black_piece
            #2 = white_piece
            #3 = black_king
            #4 = white_king
        pass

    def layer_graphics(self,locations):
        """
        Take in the list locations and use those values to
        layer on top the graphics onto the board graphic

        Args:
            locations: list generated by read_board
        Return:
            A graphic placed inside of game window, of the current board state
        """
        #Read locations and layer on pieces' corresponding
        #images in the specific pixel location relative to the
        #board graphic
        pass
